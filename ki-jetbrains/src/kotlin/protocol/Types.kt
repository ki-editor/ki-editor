/**
 * Generated by typeshare 1.7.0
 */

@file:NoLiveLiterals

package com.kieditor.protocol

import androidx.compose.runtime.NoLiveLiterals
import kotlinx.serialization.*

@Serializable
data class Position (
	val line: UInt,
	val character: UInt
)

@Serializable
data class Range (
	val start: Position,
	val end: Position
)

@Serializable
data class Selection (
	/// The other end of the selection
	val anchor: Position,
	/// The cursor position
	val active: Position,
	val is_extended: Boolean? = null
)

@Serializable
data class SelectionSet (
	val uri: String? = null,
	val selections: List<Selection>
)

/// Represents a single text edit operation.
@Serializable
data class DiffEdit (
	/// The range of the text to be replaced.
	val range: Range,
	/// The new text to replace the range.
	val new_text: String
)

@Serializable
data class BufferParams (
	val uri: String
)

@Serializable
data class SyncBufferResponseParams (
	val uri: String,
	val content: String
)

@Serializable
data class BufferOpenParams (
	val uri: String,
	val selections: List<Selection>,
	val content: String
)

@Serializable
data class BufferDiffParams (
	val buffer_id: String,
	val edits: List<DiffEdit>
)

@Serializable
enum class EditorMode(val string: String) {
	@SerialName("normal")
	Normal("normal"),
	@SerialName("insert")
	Insert("insert"),
	@SerialName("multiCursor")
	MultiCursor("multiCursor"),
	@SerialName("findOneChar")
	FindOneChar("findOneChar"),
	@SerialName("swap")
	Swap("swap"),
	@SerialName("replace")
	Replace("replace"),
	@SerialName("extend")
	Extend("extend"),
}

@Serializable
data class ModeParams (
	val mode: EditorMode,
	val buffer_id: String? = null
)

/// Generated type representing the anonymous struct variant `Find` of the `SelectionMode` Rust enum
@Serializable
data class SelectionModeFindInner (
	val search: String
)

@Serializable
sealed class SelectionMode {
	@Serializable
	@SerialName("Character")
	object Character: SelectionMode()
	@Serializable
	@SerialName("Line")
	object Line: SelectionMode()
	@Serializable
	@SerialName("LineFull")
	object LineFull: SelectionMode()
	@Serializable
	@SerialName("Word")
	object Word: SelectionMode()
	@Serializable
	@SerialName("Token")
	object Token: SelectionMode()
	@Serializable
	@SerialName("Custom")
	object Custom: SelectionMode()
	@Serializable
	@SerialName("SyntaxNode")
	object SyntaxNode: SelectionMode()
	@Serializable
	@SerialName("SyntaxNodeFine")
	object SyntaxNodeFine: SelectionMode()
	@Serializable
	@SerialName("Mark")
	object Mark: SelectionMode()
	@Serializable
	@SerialName("Find")
	data class Find(val params: SelectionModeFindInner): SelectionMode()
	@Serializable
	@SerialName("Diagnostic")
	data class Diagnostic(val params: DiagnosticKind): SelectionMode()
	@Serializable
	@SerialName("GitHunk")
	object GitHunk: SelectionMode()
	@Serializable
	@SerialName("LocalQuickfix")
	object LocalQuickfix: SelectionMode()
}

@Serializable
data class SelectionModeParams (
	val mode: SelectionMode,
	val buffer_id: String? = null
)

@Serializable
data class LineRange (
	val start: UInt,
	val end: UInt
)

@Serializable
data class ViewportParams (
	val buffer_id: String,
	val visible_line_ranges: List<LineRange>
)

@Serializable
data class KeyboardParams (
	val key: String,
	val uri: String,
	/// This is necessary for resolving buffer content desync
	/// between Ki and the host application
	val content_hash: UInt
)

@Serializable
enum class DiagnosticSeverity(val string: String) {
	@SerialName("Warning")
	Warning("Warning"),
	@SerialName("Hint")
	Hint("Hint"),
	@SerialName("Information")
	Information("Information"),
	@SerialName("Error")
	Error("Error"),
}

@Serializable
data class Diagnostic (
	val range: Range,
	val message: String,
	val severity: DiagnosticSeverity? = null
)

@Serializable
data class BufferDiagnostics (
	val path: String,
	val diagnostics: List<Diagnostic>
)

@Serializable
data class PromptItem (
	val label: String,
	val details: String? = null
)

@Serializable
data class PromptOpenedParams (
	val title: String,
	val items: List<PromptItem>
)

@Serializable
data class JumpTarget (
	val key: String,
	val position: Position
)

@Serializable
data class JumpsParams (
	val uri: String,
	val targets: List<JumpTarget>
)

@Serializable
data class MarksParams (
	val uri: String,
	val marks: List<Range>
)

@Serializable
sealed class InputMessage {
	@Serializable
	@SerialName("ping")
	data class Ping(val params: String?): InputMessage()
	@Serializable
	@SerialName("buffer.open")
	data class BufferOpen(val params: BufferOpenParams): InputMessage()
	@Serializable
	@SerialName("buffer.change")
	data class BufferChange(val params: BufferDiffParams): InputMessage()
	@Serializable
	@SerialName("buffer.active")
	data class BufferActive(val params: BufferParams): InputMessage()
	@Serializable
	@SerialName("editor.syncBufferResponse")
	data class SyncBufferResponse(val params: SyncBufferResponseParams): InputMessage()
	@Serializable
	@SerialName("selection.set")
	data class SelectionSet(val params: SelectionSet): InputMessage()
	@Serializable
	@SerialName("keyboard.input")
	data class KeyboardInput(val params: KeyboardParams): InputMessage()
	@Serializable
	@SerialName("viewport.change")
	data class ViewportChange(val params: ViewportParams): InputMessage()
	@Serializable
	@SerialName("diagnostics.change")
	data class DiagnosticsChange(val params: List<BufferDiagnostics>): InputMessage()
	@Serializable
	@SerialName("prompt.enter")
	data class PromptEnter(val params: String): InputMessage()
}

@Serializable
data class InputMessageWrapper (
	val message: InputMessage,
	val id: UInt
)

/// Generated type representing the anonymous struct variant `SyncBufferRequest` of the `OutputMessage` Rust enum
@Serializable
data class OutputMessageSyncBufferRequestInner (
	val uri: String
)

/// Generated type representing the anonymous struct variant `ShowInfo` of the `OutputMessage` Rust enum
@Serializable
data class OutputMessageShowInfoInner (
	val info: String? = null
)

@Serializable
sealed class OutputMessage {
	@Serializable
	@SerialName("ping")
	data class Ping(val params: String): OutputMessage()
	@Serializable
	@SerialName("error")
	data class Error(val params: String): OutputMessage()
	/// TODO: handle this on VS Code side
	/// See https://code.visualstudio.com/api/extension-guides/virtual-documents
	@Serializable
	@SerialName("buffer.open")
	data class BufferOpen(val params: BufferParams): OutputMessage()
	@Serializable
	@SerialName("buffer.save")
	data class BufferSave(val params: BufferParams): OutputMessage()
	@Serializable
	@SerialName("buffer.diff")
	data class BufferDiff(val params: BufferDiffParams): OutputMessage()
	@Serializable
	@SerialName("selection.update")
	data class SelectionUpdate(val params: SelectionSet): OutputMessage()
	@Serializable
	@SerialName("mode.change")
	data class ModeChange(val params: ModeParams): OutputMessage()
	@Serializable
	@SerialName("selection_mode.change")
	data class SelectionModeChange(val params: SelectionModeParams): OutputMessage()
	@Serializable
	@SerialName("viewport.change")
	data class ViewportChange(val params: ViewportParams): OutputMessage()
	@Serializable
	@SerialName("prompt.opened")
	data class PromptOpened(val params: PromptOpenedParams): OutputMessage()
	@Serializable
	@SerialName("editor.jump")
	data class JumpsChanged(val params: JumpsParams): OutputMessage()
	@Serializable
	@SerialName("editor.mark")
	data class MarksChanged(val params: MarksParams): OutputMessage()
	@Serializable
	@SerialName("lsp.definition")
	object RequestLspDefinition: OutputMessage()
	@Serializable
	@SerialName("lsp.hover")
	object RequestLspHover: OutputMessage()
	@Serializable
	@SerialName("lsp.references")
	object RequestLspReferences: OutputMessage()
	@Serializable
	@SerialName("lsp.declaration")
	object RequestLspDeclaration: OutputMessage()
	@Serializable
	@SerialName("lsp.typeDefinition")
	object RequestLspTypeDefinition: OutputMessage()
	@Serializable
	@SerialName("lsp.implementation")
	object RequestLspImplementation: OutputMessage()
	@Serializable
	@SerialName("editor.keyboardLayout")
	data class KeyboardLayoutChanged(val params: String): OutputMessage()
	@Serializable
	@SerialName("lsp.rename")
	object RequestLspRename: OutputMessage()
	@Serializable
	@SerialName("lsp.codeAction")
	object RequestLspCodeAction: OutputMessage()
	@Serializable
	@SerialName("lsp.documentSymbols")
	object RequestLspDocumentSymbols: OutputMessage()
	@Serializable
	@SerialName("editor.syncBufferRequest")
	data class SyncBufferRequest(val params: OutputMessageSyncBufferRequestInner): OutputMessage()
	@Serializable
	@SerialName("editor.showInfo")
	data class ShowInfo(val params: OutputMessageShowInfoInner): OutputMessage()
}

@Serializable
data class ResponseError (
	val code: Int,
	val message: String,
	val data: Value? = null
)

@Serializable
data class OutputMessageWrapper (
	val message: OutputMessage,
	val id: UInt,
	val error: ResponseError? = null
)

@Serializable
enum class DiagnosticKind(val string: String) {
	@SerialName("Error")
	Error("Error"),
	@SerialName("Information")
	Information("Information"),
	@SerialName("Warning")
	Warning("Warning"),
	@SerialName("All")
	All("All"),
	@SerialName("Hint")
	Hint("Hint"),
}

