{"searchDocs":[{"title":"Documentation Migration","type":0,"sectionRef":"#","url":"/ki-editor/blog/documentation-migration","content":"Ki's documentation has migrated from Rust MD Book to Docusaurus to incorporate interactive tutorials.","keywords":"","version":null},{"title":"Components","type":0,"sectionRef":"#","url":"/ki-editor/docs/components/","content":"Components Every components is built on top of the Editor component.","keywords":"","version":"Next"},{"title":"File Explorer","type":0,"sectionRef":"#","url":"/ki-editor/docs/components/file-explorer","content":"","keywords":"","version":"Next"},{"title":"Keymap​","type":1,"pageTitle":"File Explorer","url":"/ki-editor/docs/components/file-explorer#keymap","content":" Loading...  ","version":"Next","tagName":"h2"},{"title":"Meanings​","type":1,"pageTitle":"File Explorer","url":"/ki-editor/docs/components/file-explorer#meanings","content":" Label\tActionAdd Path\tAdd a new file/folder under the current path 1 Dup path\tDuplicate current file to a new path Delete Path\tDelete current file/folder Move Path\tMove (or rename) the current file/folder 2 Refresh\tRefresh the file explorer 3  ","version":"Next","tagName":"h2"},{"title":"Other keybinding​","type":1,"pageTitle":"File Explorer","url":"/ki-editor/docs/components/file-explorer#other-keybinding","content":" enter is override to mean:  Expand/collapse folder OROpen file  ","version":"Next","tagName":"h2"},{"title":"Tips​","type":1,"pageTitle":"File Explorer","url":"/ki-editor/docs/components/file-explorer#tips","content":" Because the File Explorer is just a YAML file, the following actions are free1:  Action\tHow?Go to parent folder\tUse [a j]4 Go to first/last file in current folder\tUse First/Last with Syntax Node Go to next/previous file/folder at current level, skipping expanded children\tUse Left/Right with Syntax Node    Footnotes​ To add a folder, append / to the file name. Can be nested, and new directories will be created as required. ↩ ↩2 Works like mkdir -p, it will create new directories when required. ↩ This is necessary sometimes because the file system is modified by external factors, and Ki does not watch for file changes. ↩ Free as in no extra implementations required ↩ ","version":"Next","tagName":"h2"},{"title":"Prompt","type":0,"sectionRef":"#","url":"/ki-editor/docs/components/prompt","content":"","keywords":"","version":"Next"},{"title":"History​","type":1,"pageTitle":"Prompt","url":"/ki-editor/docs/components/prompt#history","content":" Every kind of prompt has its own history.  For example, the search prompt stores the history of searches.  Unlike the usual prompts, however, the historical entries of a prompt are shown below the current line, starting with the most recent entry.  To navigate to historical entries, use Normal Mode.  enter is overridden to mean select the current item, it works in both Insert Mode and Normal mode.  ","version":"Next","tagName":"h2"},{"title":"Groups​","type":1,"pageTitle":"Prompt","url":"/ki-editor/docs/components/prompt#groups","content":" The items of a prompt can be grouped, for example, the items of the file picker are grouped by their parent folder.  The group name of each item is also matched by the search query, in a disjunctive manner, i.e. an item will be matched if either its group name or its own name satisfies the search query.  ","version":"Next","tagName":"h2"},{"title":"Behaviour​","type":1,"pageTitle":"Prompt","url":"/ki-editor/docs/components/prompt#behaviour","content":" The prompt has two behaviours:  Kind\tBehavior\tExamplesPicker\tSelect current matching item upon enter\tsymbol picker, file picker Prompt\tUse current search query upon enter\tsearch prompt, rename prompt  ","version":"Next","tagName":"h2"},{"title":"Special Picker Behaviors​","type":1,"pageTitle":"Prompt","url":"/ki-editor/docs/components/prompt#special-picker-behaviors","content":" Currently the file picker is the only prompt with special behavior. Other prompts may get special behaviors in the future.  ","version":"Next","tagName":"h2"},{"title":"File Picker​","type":1,"pageTitle":"Prompt","url":"/ki-editor/docs/components/prompt#file-picker","content":" Key\tBehavioralt+g (Qwerty)\tOpen all narrowed files in the Completion list  Imagine you are going to work on the widget in your source code project. You may have three files: a controller, a view and a test. You type widget into the file picker and that narrows down the completions to widget.js,widget.html and widget_test.js. Pressing ctrl+o will open all three and close the file picker. ","version":"Next","tagName":"h3"},{"title":"Configurations","type":0,"sectionRef":"#","url":"/ki-editor/docs/configurations","content":"","keywords":"","version":"Next"},{"title":"Files for configurations​","type":1,"pageTitle":"Configurations","url":"/ki-editor/docs/configurations#files-for-configurations","content":" Type\tPathLanguages\tshared/src/languages.rs  ","version":"Next","tagName":"h2"},{"title":"Environment variables for configurations​","type":1,"pageTitle":"Configurations","url":"/ki-editor/docs/configurations#environment-variables-for-configurations","content":" ","version":"Next","tagName":"h2"},{"title":"Intro​","type":1,"pageTitle":"Configurations","url":"/ki-editor/docs/configurations#intro","content":" Until a method of basic configuration is decided upon, settings for Ki will be configured via the environment variables.  ","version":"Next","tagName":"h3"},{"title":"KI_EDITOR_THEME​","type":1,"pageTitle":"Configurations","url":"/ki-editor/docs/configurations#ki_editor_theme","content":" The theme defaults to &quot;VS Code (Light)&quot;. You can find a list of known themes by launching ki and using the Pick Theme option, space a.  ","version":"Next","tagName":"h3"},{"title":"KI_EDITOR_KEYBOARD​","type":1,"pageTitle":"Configurations","url":"/ki-editor/docs/configurations#ki_editor_keyboard","content":" For configuring keyboard layout, with the following possible values:  qwerty (Default)dvorakcolemakcolemak_dhcolemak_dh_semi_quotedvorak_iuworkman    Footnotes​ For example, see dwm and Xmonad ↩ Neovim usually let's you glide through until it commits kamikaze ↩ Rant: TOML does not endorse an official formatter ↩ ","version":"Next","tagName":"h3"},{"title":"Comparisons with other modal editors","type":0,"sectionRef":"#","url":"/ki-editor/docs/comparisons/","content":"","keywords":"","version":"Next"},{"title":"Keybindings coherence​","type":1,"pageTitle":"Comparisons with other modal editors","url":"/ki-editor/docs/comparisons/#keybindings-coherence","content":" Coherence means the quality of being logical and consistent.  Ki keybindings are exceptionally coherent due to its mental model.  The following table demonstrates the incoherence of Vim keybindings:  Selection mode / Action\tNext\tPreviousWord\te / w\tb Long word\tE / W\tB Search matches\tn\tN Line\tj\tk Column\tl\th Paragraph (empty lines)\t}\t{ Git hunk 4\t]c\t[c One character\tf/t\tF/T Repeat latest f/t motion\t;\t, Quickfix\t:cnext\t:cprev Search current word\t*\t#  The following table demonstrates the incoherence of Helix keybindings 5:  Selection mode / Action\tNext\tPreviousSibling node\talt+n\talt+p Add cursor (line-wise)\tC\talt+c Extend line\tx\tNone LSP Diagnostics\t]d\t[d  As you can see, there's no single logical categorization for these keymaps, they are either lowercase-uppercase, normal-alt, left-right bracket, or outright unexplainable.  In Ki, all of these boil down to j and l only!  Ok, how is this possible? It's possible because you have to choose your selection mode first before you move.  For example:  If you want to move to the next word, you enter the Word selection mode first before pressing l (move to next selection).If you want to move to the next line, you enter the Line selection mode first before pressing l  You only have to memorize the movement keybindings once, and then the selection mode keybindings, and you will be able to explore new ways of navigation on your own.  Once you've learned the Ki keybindings, it's tough to look back (at least for me).  Note that the Ki keybindings cannot be simply implemented in Vim/Helix via key- remapping, due to the lack of the concept of Selection Mode, and implementing that requires major architectural changes in the core.    Footnotes​ The default keybindings for structural navigation in Helix are hard to access: alt+n, alt+p, alt+i and alt+o. Also, there's no easy way to revert to previous selection, which is crucial for structural manipulation. ↩ Not all GNU Readline keybindings are implemented, but they are welcomed. ↩ Extensive support in Prompt, but minimal support in Editor. ↩ With vim-unimpaired. ↩ Keybindings inherited from Vim are omitted. ↩ ","version":"Next","tagName":"h2"},{"title":"Core concepts","type":0,"sectionRef":"#","url":"/ki-editor/docs/core-concepts","content":"","keywords":"","version":"Next"},{"title":"1. All selection modes are equal​","type":1,"pageTitle":"Core concepts","url":"/ki-editor/docs/core-concepts#1-all-selection-modes-are-equal","content":" Unlike other modal editors 1, the line &amp; column movements/actions are not given special treatment.  As mentioned by Rob Pike in Structural Regular Expression:  The current UNIX® text processing tools are weakened by the built-in concept of a line.  In Ki, all movements must be paired by a pre-selected selection mode.  Consequently, all movements are bound to the same keymaps.  By combining movements and selection modes, it's easy to perform any kind of movements imaginable.  ","version":"Next","tagName":"h2"},{"title":"2. Positional Keymaps​","type":1,"pageTitle":"Core concepts","url":"/ki-editor/docs/core-concepts#2-positional-keymaps","content":" The keymaps of Ki are strictly positional, meaning they no longer rely on mnemonics (for example, p for Put in Vim).  This entails:  ","version":"Next","tagName":"h2"},{"title":"A. Keyboard Layout Agnostic​","type":1,"pageTitle":"Core concepts","url":"/ki-editor/docs/core-concepts#a-keyboard-layout-agnostic","content":" No matter which keyboard layout you use, be it QWERTY, Dvorak, Colemak, etc., the keymap of Ki remains unchanged.  ","version":"Next","tagName":"h3"},{"title":"B. Bigram Optimization​","type":1,"pageTitle":"Core concepts","url":"/ki-editor/docs/core-concepts#b-bigram-optimization","content":" Because we are no longer bound by mnemonics, we can optimize common bigrams using either Colemak's Rolling or Dvorak's Hand Alternation.  For example, copying and pasting the current selection is done by pressing c then v on QWERTY.  ","version":"Next","tagName":"h3"},{"title":"C. Positional Coherence​","type":1,"pageTitle":"Core concepts","url":"/ki-editor/docs/core-concepts#c-positional-coherence","content":" Actions with similar meanings are placed in the same position across the shift, alt, or menu layers.  For example, the actions on the position of m on QWERTY roughly relate to the concept of &quot;Change&quot;.  Mode\tMeaningNormal\tChange File Explorer\tRename File Extend\tChange Surround Space Menu\tLSP Rename  ","version":"Next","tagName":"h3"},{"title":"D. Travel Distance Optimization​","type":1,"pageTitle":"Core concepts","url":"/ki-editor/docs/core-concepts#d-travel-distance-optimization","content":" The placement of actions are also guided by their ubiquity, more commonly used actions will placed on better positions such as the homerow.  ","version":"Next","tagName":"h3"},{"title":"3. Every component is a buffer/editor​","type":1,"pageTitle":"Core concepts","url":"/ki-editor/docs/core-concepts#3-every-component-is-a-buffereditor","content":" This is also a core philosophy of Emacs and Vim, however in the recent modal editors such as Kakoune, Neovim, and Helix, they took another approach (the standard GUI approach) where every component is different.  Although having different components greatly improves the aesthetic, it's not without disadvantages:  Users are forced to learn new keymaps for new components. 2Some components are weaker than others.Reinventing the wheel everywhere. 3  Unlike Emacs and Vim, Ki took this approach to the extreme, literally everything is an editor, including prompt and completion dropdown.  ","version":"Next","tagName":"h2"},{"title":"4. Minimal configurations​","type":1,"pageTitle":"Core concepts","url":"/ki-editor/docs/core-concepts#4-minimal-configurations","content":" Part of the reason why Ki was created is due to the configuration nightmare that I have been through when using Neovim for the past 4 years.  Thus, I'm in favor of minimal configurations, users should not spend eons configuring something simple (which makes Helix attractive).  That being said, the following components should be configurable:  ThemeLanguage-specific configurations: FormatterTree-sitter grammarLSP  ","version":"Next","tagName":"h2"},{"title":"5. Keybindings synergy​","type":1,"pageTitle":"Core concepts","url":"/ki-editor/docs/core-concepts#5-keybindings-synergy","content":" Most keybindings in Ki synergize with one another, though a minority of them are lone rangers.  But lone rangers are not encouraged, they are only added if they are truly crucial.    Footnotes​ Vim, Neovim, Kakoune and Helix. ↩ For example, in Vim, p means paste, but to paste in prompt use ctrl+r instead. ↩ For example, in the Helix's File Explorer PR, every movement, including scrolling was reimplemented, although they were implemented in the Editor component. ↩ ","version":"Next","tagName":"h2"},{"title":"Introduction","type":0,"sectionRef":"#","url":"/ki-editor/docs/introduction","content":"","keywords":"","version":"Next"},{"title":"Community​","type":1,"pageTitle":"Introduction","url":"/ki-editor/docs/introduction#community","content":" Matrix https://matrix.to/#/#ki-editor:matrix.org  ","version":"Next","tagName":"h2"},{"title":"Showcase​","type":1,"pageTitle":"Introduction","url":"/ki-editor/docs/introduction#showcase","content":" Loading...    Footnotes​ It means &quot;tree&quot; (木) in Japanese. ↩ Modal: root word mode, meaning multiple modes. ↩ ","version":"Next","tagName":"h2"},{"title":"Insert Mode","type":0,"sectionRef":"#","url":"/ki-editor/docs/insert-mode/","content":"","keywords":"","version":"Next"},{"title":"Enter Normal Mode​","type":1,"pageTitle":"Insert Mode","url":"/ki-editor/docs/insert-mode/#enter-normal-mode","content":" To enter the normal mode, press esc (regardless of keyboard layout).  If the current selection mode is any of the following, then the selection before the cursor will be selected:  LineLine FullTokenWord  Otherwise, only one character before the cursor will be selected, this is because except the selection modes above, the cursor might jump beyond the current view, causing unintended disorientation.  Loading...  ","version":"Next","tagName":"h2"},{"title":"Completion dropdown​","type":1,"pageTitle":"Insert Mode","url":"/ki-editor/docs/insert-mode/#completion-dropdown","content":" The following keybindings only work when the completion dropdown is opened.  Loading...  Label\tMeaningComp →\tNext completion item ← Comp\tPrevious completion item Select Comp\tSelect current completion item  ","version":"Next","tagName":"h2"},{"title":"Other​","type":1,"pageTitle":"Insert Mode","url":"/ki-editor/docs/insert-mode/#other","content":" Loading...  Label/Keybinding\tMeaningLine ←\tMove to line start Line →\tMove to line end Kill Line ←\tKill line backward Kill Line →\tKill line forward Delete Token ←\tDelete token backward alt+backspace\tDelete word backward ","version":"Next","tagName":"h2"},{"title":"Installation","type":0,"sectionRef":"#","url":"/ki-editor/docs/installation","content":"","keywords":"","version":"Next"},{"title":"Build from source​","type":1,"pageTitle":"Installation","url":"/ki-editor/docs/installation#build-from-source","content":" Ensure the Rust toolchain is installed using rustup.rs.Use Rust 1.80.0:  rustup default 1.80.0   Install openssl's development package  # Ubuntu sudo apt install libssl-dev # Fedora sudo dnf install openssl-devel   Clone the project:  git clone https://github.com/ki-editor/ki-editor.git   Run installation:  cd ki-editor cargo install --locked --path .   The ki binary should be installed.  ","version":"Next","tagName":"h2"},{"title":"Use nix flake 1​","type":1,"pageTitle":"Installation","url":"/ki-editor/docs/installation#use-nix-flake-","content":" Install ki package  with nix profile:  nix profile install github:ki-editor/ki-editor   or as part of nix configuration, e.g.:  { inputs = { nixpkgs.url = &quot;github:NixOS/nixpkgs/nixos-unstable&quot;; ki-editor.url = &quot;github:ki-editor/ki-editor&quot;; }; outputs = { nixpkgs, ki-editor, ... }: { nixosConfigurations.&quot;«hostname»&quot; = nixpkgs.lib.nixosSystem { system = &quot;x86_64-linux&quot;; modules = [ { environment.systemPackages = [ ki-editor.packages.x86_64-linux.default ] } ./configuration.nix ]; }; }; }   Build tree-sitter grammars:  ki @ grammar fetch &amp;&amp; ki @ grammar build     Footnotes​ This flake also provides a basic development environment for Ki Editor which can be enabled by nix develop command. ↩ ","version":"Next","tagName":"h2"},{"title":"Modes","type":0,"sectionRef":"#","url":"/ki-editor/docs/modes","content":"","keywords":"","version":"Next"},{"title":"Insert Mode​","type":1,"pageTitle":"Modes","url":"/ki-editor/docs/modes#insert-mode","content":" In this mode, the editor behaves like the common editor, where pressing alphabets on the keyboards inserts those alphabets into the file.  ","version":"Next","tagName":"h2"},{"title":"Normal Mode​","type":1,"pageTitle":"Modes","url":"/ki-editor/docs/modes#normal-mode","content":" In Normal mode, the keys on the keyboards are assigned special meanings.  ","version":"Next","tagName":"h2"},{"title":"To get started​","type":1,"pageTitle":"Modes","url":"/ki-editor/docs/modes#to-get-started","content":" To enter Insert mode, press u or o.  To enter Normal mode, press esc.  ","version":"Next","tagName":"h2"},{"title":"Tips​","type":1,"pageTitle":"Modes","url":"/ki-editor/docs/modes#tips","content":" Repurpose the Caplock key on your keyboard to be esc.Most of the magic happens in Normal mode, so try not to go to Insert mode unless necessary. ","version":"Next","tagName":"h2"},{"title":"Normal Mode","type":0,"sectionRef":"#","url":"/ki-editor/docs/normal-mode/","content":"Normal Mode In Normal Mode, the keys on the keyboard no longer type, most of them are assigned special meanings. Most of the magic happens in this mode.","keywords":"","version":"Next"},{"title":"Core Movements","type":0,"sectionRef":"#","url":"/ki-editor/docs/normal-mode/core-movements","content":"","keywords":"","version":"Next"},{"title":"Intro​","type":1,"pageTitle":"Core Movements","url":"/ki-editor/docs/normal-mode/core-movements#intro","content":" Core Movements is one of the main concepts in Ki, because it is standardized for every selection modes.  There are 9 movements in total:  ◀ ▶ Left/RightPrevious/Next▲ ▼ Up/DownFirst/LastJumpIndex Jump to IndexCurrent  ","version":"Next","tagName":"h2"},{"title":"Keymap​","type":1,"pageTitle":"Core Movements","url":"/ki-editor/docs/normal-mode/core-movements#keymap","content":" Loading...  ","version":"Next","tagName":"h2"},{"title":"◀ ▶ Left/Right​","type":1,"pageTitle":"Core Movements","url":"/ki-editor/docs/normal-mode/core-movements#--leftright","content":" Left/Right means move to the previous/next meaningful selection of the current selection mode.  For example:  Selection Mode\tMeaningSyntax Node\tNext/Previous named sibling Token\tNon-symbol token  ","version":"Next","tagName":"h3"},{"title":"Previous/Next​","type":1,"pageTitle":"Core Movements","url":"/ki-editor/docs/normal-mode/core-movements#previousnext","content":" Previous/Next means move to the previous/next selection of the current selection mode, without skipping any selections (generally).  For example:  Selection Mode\tMeaningSyntax Node\tSibling nodes including anonymous ones Token\tAll tokens including symbols Line\tEmpty lines  ","version":"Next","tagName":"h3"},{"title":"▲ ▼ Up/Down​","type":1,"pageTitle":"Core Movements","url":"/ki-editor/docs/normal-mode/core-movements#--updown","content":" Up/Down means move to the nearest selection above/below the current line, except for the following selection modes:  Selection Mode\tMeaningSyntax Node\tParent or First-Sibling Quickfix\tTo first item of next/previous file  Sticky Column​  When a vertical movement is executed, the current cursor column will be stored as the sticky column, such that subsequent vertical movements will try to adhere as much as possible to that sticky column.  The sticky column will be cleared once any non-vertical movement is executed.  Loading...  ","version":"Next","tagName":"h3"},{"title":"First/Last​","type":1,"pageTitle":"Core Movements","url":"/ki-editor/docs/normal-mode/core-movements#firstlast","content":" By default, First/Last moves to the first/last selection of the current selection mode.  Selection Mode\tMeaningSyntax Node\tFirst/Last named sibling Quickfix\tFirst/Last item Char\tFirst/Last char in the current word Word\tFirst/Last word in the current token Token\tPrevious/Next symbolic tokens Line &amp; Full Line\tFirst/Last line of the current file  ","version":"Next","tagName":"h3"},{"title":"Jump​","type":1,"pageTitle":"Core Movements","url":"/ki-editor/docs/normal-mode/core-movements#jump","content":" This is my favorite movement, which is inspired by Vim Easymotion and friends 1.  It allows you to jump to your desired position (as long as it is within the screen), with just 4 keypresses most of the time.  It works like this:  Choose your selection modePress ;Press the first letter of the selection that you want to jump to.Press the letter that appears on top of the selection.Done.  Recommended selection modes:  Syntax NodeWordToken  This movement can also work with the Swap mode to swap two syntax expressions that are far apart.  Loading...  Note: All letters after the first will be selected based on key accessibility in the chosen keyboard layout.  ","version":"Next","tagName":"h3"},{"title":"Index Jump to Index​","type":1,"pageTitle":"Core Movements","url":"/ki-editor/docs/normal-mode/core-movements#index-jump-to-index","content":" When this is activated, you will be prompted to key in a 1-based index, which after Enter will take you to the nth selection of the current selection mode.  Recommended selection modes:  Line (For going to a specific line number)Char (For going to a specific column number)  ","version":"Next","tagName":"h3"},{"title":"Current​","type":1,"pageTitle":"Core Movements","url":"/ki-editor/docs/normal-mode/core-movements#current","content":" This is not really a movement, since its not &quot;moving&quot; the selections per se.  There's no specific keybinding for Current because it is triggered whenever a selection mode is chosen.  For example, choosing the Line selection mode causes the current line to be selected, choosing the Word selection mode causes the current word to be selected.  In cases where there's no matching selection under the cursor, the Current movement chooses the nearest selection based on the following criteria (in order):  Same line as cursor (if possible)Nearest to cursor (in terms of horizontal movements)    Footnotes​ hop.nvim, leap.nvim, lightspeed.nvim etc. ↩ ","version":"Next","tagName":"h3"},{"title":"Other Movements","type":0,"sectionRef":"#","url":"/ki-editor/docs/normal-mode/other-movements","content":"","keywords":"","version":"Next"},{"title":"Keymap​","type":1,"pageTitle":"Other Movements","url":"/ki-editor/docs/normal-mode/other-movements#keymap","content":" Loading...  The movements categorized here are not affected or bounded by Selection Modes.  ","version":"Next","tagName":"h2"},{"title":"Meaning​","type":1,"pageTitle":"Other Movements","url":"/ki-editor/docs/normal-mode/other-movements#meaning","content":" ","version":"Next","tagName":"h2"},{"title":"Scroll ↑/Scroll ↓​","type":1,"pageTitle":"Other Movements","url":"/ki-editor/docs/normal-mode/other-movements#scroll-scroll-","content":" Scroll half-page up/down.  ","version":"Next","tagName":"h3"},{"title":"⇋ Curs​","type":1,"pageTitle":"Other Movements","url":"/ki-editor/docs/normal-mode/other-movements#-curs","content":" Swap the primary cursor with the secondary cursor.  By default, the primary cursor sits on the first character of the selection, and the secondary cursor sits on the last character of the selection.  For example, if the current selection is hello world, then the cursor sits on h, while the anchor sits on d.  The secondary cursors serves as a visual aid, making it easier to recognize when the selection range has been modified.  This is especially necessary when using selection modes such as Fine Syntax Node, where occasionally, the start of a selection remains the same while the end of it changes.  Usefulness:  When your current selection spans more than a visible screen, and you wish to see what's at the end of the current selection. For example, when you selected a very long function. When you wish to start a new selection at the end of the current selection For example, when you select a line and wish to change its last word.  Loading...  ","version":"Next","tagName":"h3"},{"title":"⇋ Anchor​","type":1,"pageTitle":"Other Movements","url":"/ki-editor/docs/normal-mode/other-movements#-anchor","content":" Swap extended selection anchors.  This is only applicable when the selection is extended.  By default, when the selection extension is activated, you can only extend the selection forward, but with this, you can extend the selection backward too.  This is similar to Vim's Visual Mode o.  ","version":"Next","tagName":"h3"},{"title":"← Select/Select →​","type":1,"pageTitle":"Other Movements","url":"/ki-editor/docs/normal-mode/other-movements#-selectselect-","content":" Keybindings: backspace/tab  Go to the previous/next selection. This is similar to Vim's ctrl+o/ctrl+i, but it onlys work within a file.  This is useful when you messed up the current selection, especially when you are using Syntax Node, and expanding the current selection to parent node.  Use ← Select to restore the selection to the previous state. Press Select → to restore the selection to the current state.  ","version":"Next","tagName":"h3"},{"title":"← Nav/Nav →​","type":1,"pageTitle":"Other Movements","url":"/ki-editor/docs/normal-mode/other-movements#-navnav-","content":" These are useful for navigating back to previous locations after actions such as Go to Definition/References or Global Search.  ","version":"Next","tagName":"h3"},{"title":"← Curs/Curs →​","type":1,"pageTitle":"Other Movements","url":"/ki-editor/docs/normal-mode/other-movements#-curscurs-","content":" Cycle primary cursor (selection) backward/forward.  ","version":"Next","tagName":"h3"},{"title":"← Marked/Marked →​","type":1,"pageTitle":"Other Movements","url":"/ki-editor/docs/normal-mode/other-movements#-markedmarked-","content":" Go to the previous/next marked files. ","version":"Next","tagName":"h3"},{"title":"Actions","type":0,"sectionRef":"#","url":"/ki-editor/docs/normal-mode/actions/","content":"","keywords":"","version":"Next"},{"title":"Keymap​","type":1,"pageTitle":"Actions","url":"/ki-editor/docs/normal-mode/actions/#keymap","content":" Loading...  ","version":"Next","tagName":"h2"},{"title":"Notes for reading​","type":1,"pageTitle":"Actions","url":"/ki-editor/docs/normal-mode/actions/#notes-for-reading","content":" When &quot;selection&quot; is mentioned, you should read it as &quot;selection(s)&quot;, because these actions work with multiple cursors.  ","version":"Next","tagName":"h2"},{"title":"Search​","type":1,"pageTitle":"Actions","url":"/ki-editor/docs/normal-mode/actions/#search","content":" ","version":"Next","tagName":"h2"},{"title":"← Search/Search →​","type":1,"pageTitle":"Actions","url":"/ki-editor/docs/normal-mode/actions/#-searchsearch-","content":" Open search prompt.  ","version":"Next","tagName":"h3"},{"title":"This​","type":1,"pageTitle":"Actions","url":"/ki-editor/docs/normal-mode/actions/#this","content":" Search this selection.  Loading...  ","version":"Next","tagName":"h3"},{"title":"Modifications​","type":1,"pageTitle":"Actions","url":"/ki-editor/docs/normal-mode/actions/#modifications","content":" ","version":"Next","tagName":"h2"},{"title":"Raise​","type":1,"pageTitle":"Actions","url":"/ki-editor/docs/normal-mode/actions/#raise","content":" This is one of my favorite actions, it only works for syntax node selection modes.  This replaces the parent node of the current node, with the current node.  Loading...  Note: Raise should never cause any syntax errors, if it does that's a bug.  ","version":"Next","tagName":"h3"},{"title":"← Replace/Replace →​","type":1,"pageTitle":"Actions","url":"/ki-editor/docs/normal-mode/actions/#-replacereplace-","content":" Replace current selection with previous/next copied text in the clipboard history.  This is similar to Yanking Earlier Kills in Emacs.  This is useful when you want to retrieve earlier copies.  ","version":"Next","tagName":"h3"},{"title":"← Open/Open →​","type":1,"pageTitle":"Actions","url":"/ki-editor/docs/normal-mode/actions/#-openopen-","content":" Open before/after selection.  If the current selection mode is not Syntax Node, then Open inserts a newline with the respective indent after/before the current line.  Otherwise, it inserts a gap before/after the current selection, and then enter Insert mode.  Loading...  ","version":"Next","tagName":"h3"},{"title":"← Delete/Delete →​","type":1,"pageTitle":"Actions","url":"/ki-editor/docs/normal-mode/actions/#-deletedelete-","content":" Delete until previous/next selection.  This deletes the current selection(s), however, if the current selection mode iscontiguous, it will delete until the next/previous selection, and selects the next/previous selection.  But, if the current selection is the last/first selection, it will delete until the previous/next selection instead, and selects the previous/next selection.  For example, consider the following Javascript code:  hello(x, y);   Assuming the current selection mode is Syntax Node, and the current selection is x, pressing d results in the following:  hello(y);   Loading...  ","version":"Next","tagName":"h3"},{"title":"Change​","type":1,"pageTitle":"Actions","url":"/ki-editor/docs/normal-mode/actions/#change","content":" This deletes the current selected text, and enter Insert mode.  ","version":"Next","tagName":"h3"},{"title":"Replace #​","type":1,"pageTitle":"Actions","url":"/ki-editor/docs/normal-mode/actions/#replace-","content":" Replace with pattern.  This replaces the current selection using the search pattern and replacement pattern specified in the Text Search Configuration.  For example:  Mode\tSelected text\tSearch\tReplacement\tResultLiteral\tf\tf\tg\tg(x) Regex\t&quot;yo&quot;\t&quot;(.*)&quot;\t[$1]\t[yo] AST Grep\tf(x)\tf($Z)\t$Z(f)\tx(f) Naming Convention Agnostic\ta_bu\ta bu\tto li\tto_li  ","version":"Next","tagName":"h3"},{"title":"Join​","type":1,"pageTitle":"Actions","url":"/ki-editor/docs/normal-mode/actions/#join","content":" Joins multiple lines within the current selection(s) into a single line.  Loading...  ","version":"Next","tagName":"h3"},{"title":"Break​","type":1,"pageTitle":"Actions","url":"/ki-editor/docs/normal-mode/actions/#break","content":" Break the current selection(s) to the next line, with the indentation of the current line.  This is a shortcut of i enter esc.  Loading...  ","version":"Next","tagName":"h3"},{"title":"Dedent/Indent​","type":1,"pageTitle":"Actions","url":"/ki-editor/docs/normal-mode/actions/#dedentindent","content":" Dedent/Indent the current selection by 4 spaces.  ","version":"Next","tagName":"h3"},{"title":"Transform​","type":1,"pageTitle":"Actions","url":"/ki-editor/docs/normal-mode/actions/#transform","content":" Loading...  Transformative actions are nested under here, such as (non-exhaustive):  Casing conversionWrapToggle line commentToggle block comment  ","version":"Next","tagName":"h3"},{"title":"Meta​","type":1,"pageTitle":"Actions","url":"/ki-editor/docs/normal-mode/actions/#meta","content":" ","version":"Next","tagName":"h2"},{"title":"← Insert/Insert →​","type":1,"pageTitle":"Actions","url":"/ki-editor/docs/normal-mode/actions/#-insertinsert-","content":" Enter insert mode before/after selection.  ","version":"Next","tagName":"h3"},{"title":"Mark Sel​","type":1,"pageTitle":"Actions","url":"/ki-editor/docs/normal-mode/actions/#mark-sel","content":" Toggles a bookmark at the current selection, allowing you to navigate elsewhere in the codebase while maintaining a reference to your focal point without memorizing its exact location.  ","version":"Next","tagName":"h3"},{"title":"Mark File​","type":1,"pageTitle":"Actions","url":"/ki-editor/docs/normal-mode/actions/#mark-file","content":" Mark/unmark the current file. This feature allows you to efficiently manage and switch between your primary files and other ancillary files.  File unmarking has two behaviors:  When the current file is the only marked file: File remains unmarked and focused.When the current file is NOT the only marked file: File is unmarked and focus shifts to the next marked file, similar to closing a tab.  To move between marked files, see here.  Workflow Overview​  This workflow is designed to streamline your editing process by allowing quick access to your primary files. During an editing session, you often work on primary files while occasionally referring to other less important files. Using the number keys, you can quickly jump back to your main files, enhancing your productivity and focus.  By utilizing file marking, you can efficiently navigate your editing environment and maintain your workflow's momentum.  Loading...  ","version":"Next","tagName":"h3"},{"title":"Undo/Redo​","type":1,"pageTitle":"Actions","url":"/ki-editor/docs/normal-mode/actions/#undoredo","content":" Notes:  Undo/redo works for multi-cursors as wellThe current implementation is naive, it undoes/redoes character-by-character, instead of chunk-by-chunk, so it can be mildly frustrating  ","version":"Next","tagName":"h3"},{"title":"Save​","type":1,"pageTitle":"Actions","url":"/ki-editor/docs/normal-mode/actions/#save","content":" Keybinding: enter  Upon saving, formatting will be applied if possible.  After formatting, the Current movement will be executed, to reduce disorientation caused by the misplaced selection due to content changes.  ","version":"Next","tagName":"h3"},{"title":"Clipboard​","type":1,"pageTitle":"Actions","url":"/ki-editor/docs/normal-mode/actions/#clipboard","content":" There are two kinds of clipboards:  The editor clipboardThe system clipboard  By default, the editor clipboard is used, to use the system clipboard, pressspace before pressing the keybindings of the following actions.  The editor clipboard works for multiple cursors, the text of each cursor can be copied to and pasted from the editor clipboard respectively.  The system clipboard however does not support multiple cursors. When there are multiple cursors:  Copy joins every selection into a single string and then place it in the system clipboardPaste uses the same string from the system clipboard for every cursor  Note: when new content are copied to the system clipboard, it will also be copied to the editor clipboard.  ","version":"Next","tagName":"h2"},{"title":"Copy​","type":1,"pageTitle":"Actions","url":"/ki-editor/docs/normal-mode/actions/#copy","content":" This action copies the current selected text.  Copy behaves differently depending on the number of cursors.  When there is more than one cursor, the selected texts of each cursor will be copied to the cursor-specific clipboard.  ","version":"Next","tagName":"h3"},{"title":"Paste ←/Paste →​","type":1,"pageTitle":"Actions","url":"/ki-editor/docs/normal-mode/actions/#paste-paste-","content":" Paste before/after selection.  This action pastes the content from the clipboard (either the system clipboard or cursor-specific clipboard) after/before the current selection.  Notes:  It does not replace the current selection.The pasted text will be selected.  Smart Paste​  Smart Paste will be executed when the selection mode is contiguous.  Smart Paste works by analyzing the gap between the current selection and the previous/next selection, then insert the gap before/after the pasted text.  For example, consider the following Javascript code:  hello(x, y);   Assuming the current selection mode is Syntax Node, and the current selection is y, and the copied text is z, performing a p results in the following:  hello(x, y, z);   Loading...  ","version":"Next","tagName":"h3"},{"title":"Change X​","type":1,"pageTitle":"Actions","url":"/ki-editor/docs/normal-mode/actions/#change-x","content":" This is similar to Change, but it copies the deleted text into the system clipboard. Like ctrl+x in Windows and cmd+x in macOS.  ","version":"Next","tagName":"h3"},{"title":"Replace​","type":1,"pageTitle":"Actions","url":"/ki-editor/docs/normal-mode/actions/#replace","content":" This replaces the current selected text with the copied text.  ","version":"Next","tagName":"h3"},{"title":"Replace X​","type":1,"pageTitle":"Actions","url":"/ki-editor/docs/normal-mode/actions/#replace-x","content":" Replace Cut, swaps the current selection with the content in the clipboard.  Loading... ","version":"Next","tagName":"h3"},{"title":"Search in Ki","type":0,"sectionRef":"#","url":"/ki-editor/docs/normal-mode/search-config","content":"","keywords":"","version":"Next"},{"title":"Text-based vs Menu-based Search Interfaces​","type":1,"pageTitle":"Search in Ki","url":"/ki-editor/docs/normal-mode/search-config#text-based-vs-menu-based-search-interfaces","content":" You might wonder why Ki uses a text-based language approach for search configuration instead of a menu-based UI (like VS Code and many other editors). There's a specific reason for this design choice:  Ki Motion is designed to be exportable to other environments, similar to how Neovim can be embedded in other applications (like the VS Code Neovim plugin). The text-based language approach ensures that Ki's core functionality can be exported and integrated easily with minimal functionality mappings. Converting menu interfaces between different editors would require significant adaptation work and maintenance.  While Ki previously used a more traditional menu-based approach, the current design prioritizes:  Exportability to different host environmentsSpeed and efficiency for experienced usersConsistent behavior regardless of which application Ki is embedded inKeyboard-centric workflow that keeps your hands on the keyboard  This approach allows for a consistent experience across all environments where Ki Motion might be embedded, and enables complex search patterns to be composed, saved, and shared more easily than would be possible with a menu-based interface.  ","version":"Next","tagName":"h2"},{"title":"Search Config Structure​","type":1,"pageTitle":"Search in Ki","url":"/ki-editor/docs/normal-mode/search-config#search-config-structure","content":" When you open a search prompt, you'll construct a search configuration with these components:  Search mode - Determines how your search pattern is interpretedSearch query - The actual pattern you want to search forReplacement - Used for search and replace operationsInclude globs - File patterns to include (only for global search)Exclude globs - File patterns to exclude (only for global search)  These components are separated by a delimiter character which must be non-alphanumeric and not a backslash. For example:  r hello world **.js node_modules/**   In this example:  Component\tValueMode\tr (Regex) Separator\tspace Search query\thello Replacement\tworld Include glob\t**.js Exclude glob\tnode_modules/**  ","version":"Next","tagName":"h2"},{"title":"Choosing a Separator​","type":1,"pageTitle":"Search in Ki","url":"/ki-editor/docs/normal-mode/search-config#choosing-a-separator","content":" The recommended separator is a space, but you should pick one that minimizes the need to escape characters in your search components. For example, if your search query contains spaces, you might choose / as your separator instead.  Throughout this document, you'll see examples using different separators (like spaces or slashes). These different separators are chosen specifically to avoid character escaping in each example, demonstrating how to select the most efficient separator for different search patterns.  ","version":"Next","tagName":"h2"},{"title":"Rules​","type":1,"pageTitle":"Search in Ki","url":"/ki-editor/docs/normal-mode/search-config#rules","content":" ","version":"Next","tagName":"h2"},{"title":"Escaping Rules​","type":1,"pageTitle":"Search in Ki","url":"/ki-editor/docs/normal-mode/search-config#escaping-rules","content":" Backslash (\\) is only used to escape the separator. In all other cases, it's treated as a literal backslash.You don't need to use double backslashes (\\\\) to represent a single backslash character.A backslash can never be used as the separator itself.  For example, in the input a/hell\\o\\/:  The first backslash before o is treated as a literal character (not escaping anything)The second backslash before / is escaping the separatorThe resulting search query is hello\\/ (searching for the text &quot;hello/&quot;)  ","version":"Next","tagName":"h3"},{"title":"No Error Policy​","type":1,"pageTitle":"Search in Ki","url":"/ki-editor/docs/normal-mode/search-config#no-error-policy","content":" Invalid combinations of search mode options will not result in an error. Instead, Ki will assume that the entire string is what you wanted to search for:  If you type hello (which isn't a valid mode option), Ki will use the default search mode (Literal) and search for the text &quot;hello&quot;If you type something like xyz/search, where &quot;xyz&quot; isn't a valid mode, Ki will search for the literal text &quot;xyz/search&quot;  ","version":"Next","tagName":"h3"},{"title":"No Empty Search Policy​","type":1,"pageTitle":"Search in Ki","url":"/ki-editor/docs/normal-mode/search-config#no-empty-search-policy","content":" If your configuration results in an empty search query, the entire raw input will be treated as a literal search:  For example, if you enter r//f, this would parse as: mode = Regex, search = &quot;&quot; (empty), replacement = &quot;f&quot;Since an empty search is not allowed, Ki will instead search for the literal text &quot;r//f&quot;  This policy ensures that if you intended to search for something literally that starts with specific symbols (such as C comments // or Python comments #), it will work as intended without having to explicitly prefix your search with the literal mode l&lt;separator&gt;.  However, other than search, all other components can be empty, for example, l/hello//*.js is parsed as search for literal &quot;hello&quot;, but only in files matching the *.js glob pattern.  ","version":"Next","tagName":"h3"},{"title":"Minimal Separator Policy​","type":1,"pageTitle":"Search in Ki","url":"/ki-editor/docs/normal-mode/search-config#minimal-separator-policy","content":" You do not need to include all 5 separators in all configurations, you only need to include them as needed.  For example, if you only need to specify the mode and the search query, then one separator is enough.  ","version":"Next","tagName":"h3"},{"title":"Two-phase Parsing​","type":1,"pageTitle":"Search in Ki","url":"/ki-editor/docs/normal-mode/search-config#two-phase-parsing","content":" Understanding Ki's two-phase parsing approach is crucial for building the correct mental model of how search works, helping you avoid confusion about when and how characters are escaped (unlike the &quot;escaping hell&quot; often experienced in CI config YAML files).  Ki processes your search input in two distinct phases:  Configuration Phase - During this first phase, backslashes only function to escape separators. Character sequences like \\n or \\t are treated as literal characters (a backslash followed by 'n' or 't'), not as special characters. Search Engine Phase - Once the search configuration is constructed, your search query is passed to the appropriate search engine based on the specified mode. It's only in this second phase that special character sequences might gain specific meanings.  For example:  In Regex mode, \\n will be interpreted as a newline characterIn AST Grep mode, $X will be treated as a node captureIn Literal mode, all characters maintain their literal meaning in both phases  This two-phase approach creates a clean separation between configuration syntax and search pattern language, making the system more predictable and easier to use. Once you grasp this separation, constructing complex search patterns becomes significantly more intuitive.  ","version":"Next","tagName":"h3"},{"title":"Search Modes​","type":1,"pageTitle":"Search in Ki","url":"/ki-editor/docs/normal-mode/search-config#search-modes","content":" Ki offers four primary search modes, each serving different searching needs:  ","version":"Next","tagName":"h2"},{"title":"1. Literal Mode​","type":1,"pageTitle":"Search in Ki","url":"/ki-editor/docs/normal-mode/search-config#1-literal-mode","content":" Short form: l  The default and most commonly used search mode. Every character is treated literally - a ( means a (, not the start of a capture group.  Options for Literal mode:  c - Case-sensitive (e.g., c/Hello matches &quot;Hello&quot; but not &quot;hello&quot;)w - Match whole word (e.g., w/hello matches &quot;hello&quot; but not &quot;helloWorld&quot;)s, wc, or cw - Strict mode (both case-sensitive and whole word)  Loading...  ","version":"Next","tagName":"h3"},{"title":"2. Regex Mode​","type":1,"pageTitle":"Search in Ki","url":"/ki-editor/docs/normal-mode/search-config#2-regex-mode","content":" Short form: r  Powered by the Fancy Regex engine, supporting features like look-around and backtracking.  Options for Regex mode:  rc - Case-sensitive regexrw - Whole word regex matchingrs, rcw, or rwc - Strict regex (both case-sensitive and whole word)  Loading...  ","version":"Next","tagName":"h3"},{"title":"3. AST-Grep Mode​","type":1,"pageTitle":"Search in Ki","url":"/ki-editor/docs/normal-mode/search-config#3-ast-grep-mode","content":" Short form: a  Based on AST Grep, this mode is useful for structural search and replacement in code.  Loading...  ","version":"Next","tagName":"h3"},{"title":"4. Naming Convention Agnostic Mode​","type":1,"pageTitle":"Search in Ki","url":"/ki-editor/docs/normal-mode/search-config#4-naming-convention-agnostic-mode","content":" Short form: n  One of the most powerful modes, especially when dealing with business code. This mode expands your search across different naming conventions:  kebab-caseUPPER-KEBABMACRO_CASEsnake_caseTitle Caselower caseUPPER CASEcamelCasePascalCase  For example, searching for hello world in this mode will match:  helloWorldHELLO_WORLDHelloWorldAnd many more variations  Loading...  ","version":"Next","tagName":"h3"},{"title":"Search Options​","type":1,"pageTitle":"Search in Ki","url":"/ki-editor/docs/normal-mode/search-config#search-options","content":" While the search modes above determine how your search pattern is interpreted, the following search options can be applied to modify how matches are evaluated within those modes (only applicable to Regex and Literal mode):  ","version":"Next","tagName":"h2"},{"title":"1. Match Whole Word​","type":1,"pageTitle":"Search in Ki","url":"/ki-editor/docs/normal-mode/search-config#1-match-whole-word","content":" When enabled, restricts matches to word boundaries (\\b). For example, hello will not match itself in helloWorld, only standalone occurrences.  Loading...  ","version":"Next","tagName":"h3"},{"title":"2. Case-Sensitive​","type":1,"pageTitle":"Search in Ki","url":"/ki-editor/docs/normal-mode/search-config#2-case-sensitive","content":" When enabled, the case of each character becomes significant. For example, hello will not match Hello.  Loading...  ","version":"Next","tagName":"h3"},{"title":"3. Strict​","type":1,"pageTitle":"Search in Ki","url":"/ki-editor/docs/normal-mode/search-config#3-strict","content":" A shortcut for enabling both Case-sensitive and Match Whole Word options.  ","version":"Next","tagName":"h3"},{"title":"Globbing in Global Search​","type":1,"pageTitle":"Search in Ki","url":"/ki-editor/docs/normal-mode/search-config#globbing-in-global-search","content":" Globbing patterns allow you to include or exclude specific files and directories during global search operations. This feature is powered by the globset library.  ","version":"Next","tagName":"h2"},{"title":"Include/Exclude Patterns​","type":1,"pageTitle":"Search in Ki","url":"/ki-editor/docs/normal-mode/search-config#includeexclude-patterns","content":" You can specify which files to search within or exclude from your search. For example:  l hello world **.{js,jsx} node_modules/**   This will search for &quot;hello&quot; and replace it with &quot;world&quot; in all .js and .jsx files, excluding the node_modules directory.  Globbing supports:  * - Matches any sequence of characters except /** - Matches any sequence of characters including /? - Matches any single character except /{a,b} - Matches either pattern a or pattern b[abc] - Matches any of the specified characters  ","version":"Next","tagName":"h3"},{"title":"Replacement​","type":1,"pageTitle":"Search in Ki","url":"/ki-editor/docs/normal-mode/search-config#replacement","content":" By default, submitting the search input will not trigger a replacement although the replacement is not empty.  Usually, you do not need to use the replacement, because often times you can get it done by using multicursor and changing all selections by just typing. Multicursor allows you to edit at multiple positions simultaneously.  However, in complex use cases where you want the updated result to contain part of the original string, this can sometimes be too difficult or outright impossible if you go with the multicursor plus a series of actions route.  ","version":"Next","tagName":"h2"},{"title":"Replace with Pattern​","type":1,"pageTitle":"Search in Ki","url":"/ki-editor/docs/normal-mode/search-config#replace-with-pattern","content":" To update the current selections with the replacement, use shift+X (Qwerty).  Loading...  Loading...  ","version":"Next","tagName":"h3"},{"title":"Replace all​","type":1,"pageTitle":"Search in Ki","url":"/ki-editor/docs/normal-mode/search-config#replace-all","content":" Replace all matches across the repository with a specified replacement pattern.  This is a global action affecting all matching occurrences.  Keybinding: space X  ","version":"Next","tagName":"h3"},{"title":"Overcoming Unintended Gotchas​","type":1,"pageTitle":"Search in Ki","url":"/ki-editor/docs/normal-mode/search-config#overcoming-unintended-gotchas","content":" When working with Ki's search, you might occasionally run into situations where your input is parsed differently than you intended. Here's how to handle some common scenarios:  ","version":"Next","tagName":"h2"},{"title":"Forcing Literal Mode​","type":1,"pageTitle":"Search in Ki","url":"/ki-editor/docs/normal-mode/search-config#forcing-literal-mode","content":" If you intended to perform a literal search, but your input accidentally qualifies as a multi-component configuration, you can always force literal mode by prefixing your search with l&lt;separator&gt;.  For example, you might want to search for s.to_string(), but since s is a valid option and . is a valid separator, this will be parsed as:  search = &quot;s&quot;separator = &quot;.&quot;replacement = &quot;to_string()&quot;  To fix this and search for the exact text &quot;s.to_string()&quot;, you can rerun the search by prefixing it with l (using a space character as separator since it's the easiest to type and the original search query contains no spaces):  l s.to_string()   This approach works for any input that might be unintentionally parsed as a search configuration when you just want to search for it literally, as long as you choose a separator that avoids the need to escape characters in your original search query.  ","version":"Next","tagName":"h3"},{"title":"Summary of Search Mode Syntax​","type":1,"pageTitle":"Search in Ki","url":"/ki-editor/docs/normal-mode/search-config#summary-of-search-mode-syntax","content":" Search Mode\tDescription\tExamplel or none\tLiteral (default)\thello or l hello c\tCase-sensitive literal\tc Hello w\tWhole word literal\tw hello s or wc or cw\tStrict literal\ts Hello r\tRegex\tr hel+o rc\tCase-sensitive regex\trc Hel+o rw\tWhole word regex\trw hel+o rs or rcw or rwc\tStrict regex\trs Hel+o a\tAST grep\ta/if ($cond) { $body } n\tNaming convention agnostic\tn/hello world ","version":"Next","tagName":"h2"},{"title":"Intro","type":0,"sectionRef":"#","url":"/ki-editor/docs/normal-mode/selection-modes/","content":"","keywords":"","version":"Next"},{"title":"Contiguity​","type":1,"pageTitle":"Intro","url":"/ki-editor/docs/normal-mode/selection-modes/#contiguity","content":" Selection modes are categorized by their contiguity.  If a selection mode is contiguous, it means that there are no meaningful gaps between each of the selections.  A gap is meaningful if it's neither whitespaces only nor separators like , or ;.  Primary selection modes are contiguous, while secondary selection modes are non-contiguous.    Footnotes​ For Vim users, selection mode means text objects. ↩ ","version":"Next","tagName":"h2"},{"title":"Secondary","type":0,"sectionRef":"#","url":"/ki-editor/docs/normal-mode/selection-modes/secondary/","content":"","keywords":"","version":"Next"},{"title":"Keymap​","type":1,"pageTitle":"Secondary","url":"/ki-editor/docs/normal-mode/selection-modes/secondary/#keymap","content":" ","version":"Next","tagName":"h2"},{"title":"Initialization​","type":1,"pageTitle":"Secondary","url":"/ki-editor/docs/normal-mode/selection-modes/secondary/#initialization","content":" Most secondary selection modes are nested below the 3 keybindings below, with the exception of Search and Search Current, which are placed on the first layer due to their ubiquity.  [ : Local (Backward)] : Local (Forward)\\**\\**: Global  Local Find is directional, meaning that if the cursor position does not overlap with any selections of the chosen secondary selection mode, the cursor will jump to the nearest selection in the chosen direction  Global Find however is non-directional.  Notice that the keybindings here are all located on the right side of the keyboard, this is because all the secondary selection modes are placed on the left side of the keyboard, which allows for efficient execution via hand-alternation.  There are 3 sets of keymap for secondary selection modes:  Local (Forward)Local (Backward)Global  They are almost identical except:  One and Int are only applicable for the Local keymapsSearch and This are only applicable for the Global keymapPosition of Repeat is different all 3 keymaps to enable easy combo: a. To repeat the last secondary selection backward, press [ twice b. To repeat the last secondary selection forward, press ] twice c. To repeat the last secondary selection globally, press \\\\ twice  ","version":"Next","tagName":"h3"},{"title":"Local (Forward)​","type":1,"pageTitle":"Secondary","url":"/ki-editor/docs/normal-mode/selection-modes/secondary/#local-forward","content":" Loading...  ","version":"Next","tagName":"h3"},{"title":"Local (Backward)​","type":1,"pageTitle":"Secondary","url":"/ki-editor/docs/normal-mode/selection-modes/secondary/#local-backward","content":" Loading...  ","version":"Next","tagName":"h3"},{"title":"Global​","type":1,"pageTitle":"Secondary","url":"/ki-editor/docs/normal-mode/selection-modes/secondary/#global","content":" Loading...  ","version":"Next","tagName":"h3"},{"title":"Search-related​","type":1,"pageTitle":"Secondary","url":"/ki-editor/docs/normal-mode/selection-modes/secondary/#search-related","content":" ","version":"Next","tagName":"h2"},{"title":"One​","type":1,"pageTitle":"Secondary","url":"/ki-editor/docs/normal-mode/selection-modes/secondary/#one","content":" Find one character, this is simlar to Vim's f/t.  ","version":"Next","tagName":"h3"},{"title":"Last​","type":1,"pageTitle":"Secondary","url":"/ki-editor/docs/normal-mode/selection-modes/secondary/#last","content":" Repeat the last search.  ","version":"Next","tagName":"h3"},{"title":"Config​","type":1,"pageTitle":"Secondary","url":"/ki-editor/docs/normal-mode/selection-modes/secondary/#config","content":" Configure search settings.  ","version":"Next","tagName":"h3"},{"title":"Int​","type":1,"pageTitle":"Secondary","url":"/ki-editor/docs/normal-mode/selection-modes/secondary/#int","content":" Integer. Useful for jumping to numbers.  ","version":"Next","tagName":"h3"},{"title":"LSP Diagnostics​","type":1,"pageTitle":"Secondary","url":"/ki-editor/docs/normal-mode/selection-modes/secondary/#lsp-diagnostics","content":" ","version":"Next","tagName":"h2"},{"title":"All​","type":1,"pageTitle":"Secondary","url":"/ki-editor/docs/normal-mode/selection-modes/secondary/#all","content":" All diagnostics.  ","version":"Next","tagName":"h3"},{"title":"Error​","type":1,"pageTitle":"Secondary","url":"/ki-editor/docs/normal-mode/selection-modes/secondary/#error","content":" Only Diagnostics Error.  ","version":"Next","tagName":"h3"},{"title":"Warn​","type":1,"pageTitle":"Secondary","url":"/ki-editor/docs/normal-mode/selection-modes/secondary/#warn","content":" Only Diagnostics Warning.  ","version":"Next","tagName":"h3"},{"title":"Hint​","type":1,"pageTitle":"Secondary","url":"/ki-editor/docs/normal-mode/selection-modes/secondary/#hint","content":" Only Diagnostics Hint.  ","version":"Next","tagName":"h3"},{"title":"Info​","type":1,"pageTitle":"Secondary","url":"/ki-editor/docs/normal-mode/selection-modes/secondary/#info","content":" Only Diagnostics Information.  ","version":"Next","tagName":"h3"},{"title":"LSP Location​","type":1,"pageTitle":"Secondary","url":"/ki-editor/docs/normal-mode/selection-modes/secondary/#lsp-location","content":" ","version":"Next","tagName":"h2"},{"title":"Impl​","type":1,"pageTitle":"Secondary","url":"/ki-editor/docs/normal-mode/selection-modes/secondary/#impl","content":" Implementation.  ","version":"Next","tagName":"h3"},{"title":"Decl​","type":1,"pageTitle":"Secondary","url":"/ki-editor/docs/normal-mode/selection-modes/secondary/#decl","content":" Declaration.  ","version":"Next","tagName":"h3"},{"title":"Def​","type":1,"pageTitle":"Secondary","url":"/ki-editor/docs/normal-mode/selection-modes/secondary/#def","content":" Definition.  ","version":"Next","tagName":"h3"},{"title":"Type​","type":1,"pageTitle":"Secondary","url":"/ki-editor/docs/normal-mode/selection-modes/secondary/#type","content":" Type definition.  ","version":"Next","tagName":"h3"},{"title":"Ref-/Ref+​","type":1,"pageTitle":"Secondary","url":"/ki-editor/docs/normal-mode/selection-modes/secondary/#ref-ref","content":" Ref-: References excluding declaration Ref+: References including declaration  In most cases, the Goto selection modes do not make sense in the Local (current file) context, however r and R are exceptional, because finding local references are very useful, especially when used in conjunction with Multi- cursor.  ","version":"Next","tagName":"h3"},{"title":"Misc​","type":1,"pageTitle":"Secondary","url":"/ki-editor/docs/normal-mode/selection-modes/secondary/#misc","content":" ","version":"Next","tagName":"h2"},{"title":"Repeat​","type":1,"pageTitle":"Secondary","url":"/ki-editor/docs/normal-mode/selection-modes/secondary/#repeat","content":" Repeats the last used secondary selection mode, this is particularly valuable when dealing with scenarios where standard multi-cursor operations are insufficient due to varying modification requirements.  Example​  When removing unused imports:  from math import cos # Unused import 'cos' from datetime import datetime, date # Unused import 'date'   In this case, we need t  Delete entire first lineRemove only 'date' from second line  The Repeat command lets you reuse the last selection mode without manual reactivation, making these varied modifications more efficient.  ","version":"Next","tagName":"h3"},{"title":"Quickfix​","type":1,"pageTitle":"Secondary","url":"/ki-editor/docs/normal-mode/selection-modes/secondary/#quickfix","content":" When getting selections using the Global mode, the matches will be stored into the Quickfix List.  The quickfix selection mode behaves slightly differently in the Global/Local context:  Context\tMeaningGlobal\tNavigate using the current quickfix list Local\tUse matches of the current quickfix list that is of the current file  When is global quickfix useful?​  When you entered another selection mode but wish to use back the quickfix list.  When is local quickfix useful?​  When you wanted to use Multi-cursor with the quickfix matches of the current file.  ","version":"Next","tagName":"h3"},{"title":"Hunk@/Hunk^​","type":1,"pageTitle":"Secondary","url":"/ki-editor/docs/normal-mode/selection-modes/secondary/#hunkhunk","content":" @ means compare against current branch. ^ means compare against main/master branch.  Git hunks are the diffs of the current Git repository.  It is computed by comparing the current file contents with the content on the latest commit of the current/main branch.  This is useful when you want to navigate to your recent changes, but forgot where they are.  ","version":"Next","tagName":"h3"},{"title":"Marks​","type":1,"pageTitle":"Secondary","url":"/ki-editor/docs/normal-mode/selection-modes/secondary/#marks","content":" Mark is a powerful feature that allows you to jump to files that contain marks (which can be toggled).  It also allows you to swap two sections of the same file. ","version":"Next","tagName":"h3"},{"title":"Why Ki?","type":0,"sectionRef":"#","url":"/ki-editor/docs/pitch","content":"","keywords":"","version":"Next"},{"title":"1. First-class syntactic selection​","type":1,"pageTitle":"Why Ki?","url":"/ki-editor/docs/pitch#1-first-class-syntactic-selection","content":" Being first-class means that it is not an extra or even sidekick; it is the protagonist.  To select the largest syntax node under the cursor, simply press d (Qwerty).  This feature is handy if you ever asked this question:  &quot;How can I select the current expression/function/argument/statement?&quot;  And this works as long as your language is blessed by the Tree-sitter grammarians.    ","version":"Next","tagName":"h2"},{"title":"2. First-class syntactic modification​","type":1,"pageTitle":"Why Ki?","url":"/ki-editor/docs/pitch#2-first-class-syntactic-modification","content":" ","version":"Next","tagName":"h2"},{"title":"2.1 Deletion​","type":1,"pageTitle":"Why Ki?","url":"/ki-editor/docs/pitch#21-deletion","content":" To delete multiple sibling syntax nodes in a row, first enter Syntax Node selection mode, then repeat Delete.    Notice the comma between the current and the next node is also deleted.  This doesn't only work for JSON, it can be used to also delete statements, array elements, arguments, and basically anything within a list of syntax nodes.  ","version":"Next","tagName":"h3"},{"title":"2.2 Duplication​","type":1,"pageTitle":"Why Ki?","url":"/ki-editor/docs/pitch#22-duplication","content":" To duplicate an AST node, enter Syntax Node selection mode, then execute Copy, follwed by Paste.    Notice how comma is added automatically.  ","version":"Next","tagName":"h3"},{"title":"2.3 Swap​","type":1,"pageTitle":"Why Ki?","url":"/ki-editor/docs/pitch#23-swap","content":" To swap an AST node, enter Syntax Node selection mode, then active Swap mode, and execute movements such as Left/Right/First/Last/Jump.  ","version":"Next","tagName":"h3"},{"title":"3. First-class syntactic navigation​","type":1,"pageTitle":"Why Ki?","url":"/ki-editor/docs/pitch#3-first-class-syntactic-navigation","content":" The following selections/movements are first-class:  Select current largest nodeMove to next/previous sibling nodeMove to first/last sibling nodeExpand selection to parent nodeShrink selection to first-child node  ","version":"Next","tagName":"h2"},{"title":"4. Multi-cursor​","type":1,"pageTitle":"Why Ki?","url":"/ki-editor/docs/pitch#4-multi-cursor","content":" The following example demonstrates how unused imports can be deleted using multiple cursors.  Notice how the commas are removed automatically.    ","version":"Next","tagName":"h2"},{"title":"5. Positional Keymaps​","type":1,"pageTitle":"Why Ki?","url":"/ki-editor/docs/pitch#5-positional-keymaps","content":" See here. ","version":"Next","tagName":"h2"},{"title":"Space Menu","type":0,"sectionRef":"#","url":"/ki-editor/docs/normal-mode/space-menu","content":"","keywords":"","version":"Next"},{"title":"Keymap​","type":1,"pageTitle":"Space Menu","url":"/ki-editor/docs/normal-mode/space-menu#keymap","content":" Loading...  ","version":"Next","tagName":"h2"},{"title":"LSP Actions (only applicable in the main editor):​","type":1,"pageTitle":"Space Menu","url":"/ki-editor/docs/normal-mode/space-menu#lsp-actions-only-applicable-in-the-main-editor","content":" Label\tActionCode Actions\tRequest code actions Hover\tRequest hover info Rename\tRename current symbol  ","version":"Next","tagName":"h2"},{"title":"Pickers​","type":1,"pageTitle":"Space Menu","url":"/ki-editor/docs/normal-mode/space-menu#pickers","content":" Label\tObjectBuffer\tBuffers (opened files) File\tFiles (Not git ignored) Git status @\tGit status (against current branch) 1 Git status ^\tGit status (against main branch) 2 Symbol\tLSP Symbols Theme\tThemes Keyboard\tKeyboard Layout  Searching is powered by Helix's Nucleo, and some fzf-esque search syntax works here:  Token\tDescriptionsbt\tItems that match sbt, for example serbian-bear-tinker 'wild\tItems that must include wild .mp3$\tItems that end with .mp3  Search terms can be separated by space, which means AND, and their order is unimportant.  For example, the search query stb 'wild matches wild-serbian-bear-tiger and also stubbornly_wild.  Also, you can use the initals to search for a file, for example, ekl matches editor_keymap_legend.rs.  Because every component is a buffer/editor, fuzzy search logic is also used for filtering LSP completions.  ","version":"Next","tagName":"h2"},{"title":"Buffer Behavior​","type":1,"pageTitle":"Space Menu","url":"/ki-editor/docs/normal-mode/space-menu#buffer-behavior","content":" The buffer navigation, including the Buffer List and Previous/Next Buffer options, displays only files that have been directly opened or edited by the user. Files that are merely displayed, such as those from search results or diagnostic messages, do not automatically become part of the buffer list.  For example, if you rename a symbol in file1.rs and this causes an error in file2.rs, file2.rswill be shown when navigating diagnostic messages. However, unless you edit file2.rs, it will not be added to the buffer list. Similarly, if you search your project and view results in multiple files, these files will not be included in the buffer list unless you edit them.  ","version":"Next","tagName":"h3"},{"title":"Other components​","type":1,"pageTitle":"Space Menu","url":"/ki-editor/docs/normal-mode/space-menu#other-components","content":" Label\tActionExplorer\tReveal current file in file explorer Undo Tree\tOpens the Undo Tree 1  ","version":"Next","tagName":"h2"},{"title":"System Clipboard Actions​","type":1,"pageTitle":"Space Menu","url":"/ki-editor/docs/normal-mode/space-menu#system-clipboard-actions","content":" These actions are the same as the actions here, except that they uses the system clipboard instead of the editor clipboard, and their labels prefixed by +.  ","version":"Next","tagName":"h2"},{"title":"Reveal​","type":1,"pageTitle":"Space Menu","url":"/ki-editor/docs/normal-mode/space-menu#reveal","content":" Reveal is a powerful viewport management feature that provides a bird's-eye view of your code or text. It automatically divides your viewport horizontally to show all relevant selections simultaneously, eliminating the need for scrolling (unless selections exceed the viewport height).  There are 3 kinds of Reveal:  ÷ Selection (Reveal selections)÷ Cursor (Reveal Cursors)÷ Mark (Reveal Marks)  ","version":"Next","tagName":"h2"},{"title":"Reveal Selections​","type":1,"pageTitle":"Space Menu","url":"/ki-editor/docs/normal-mode/space-menu#reveal-selections","content":" Reveal Selections dynamically creates viewports based on the selections of the current selection mode. This is particularly powerful for non-contiguous (secondary) selections created through Search, LSP Diagnostics, Git Hunks, and other multi-selection modes.  When used with Syntax Node selection mode, it can effectively emulate Code Folding, allowing you to view all sibling nodes of the current selected node, such as:  Viewing all functions of the current moduleViewing all methods of the current classViewing all statements of the current blockViewing all subheaders under a header in a Markdown file  Loading...  ","version":"Next","tagName":"h3"},{"title":"Reveal Cursors​","type":1,"pageTitle":"Space Menu","url":"/ki-editor/docs/normal-mode/space-menu#reveal-cursors","content":" Reveal Cursors is not just useful, but essential when working with multiple cursors. It provides visual confirmation and confidence that your editing operations will be correctly applied across all cursor positions. This is particularly valuable for bulk editing operations where precision is crucial.  Loading...  ","version":"Next","tagName":"h3"},{"title":"Reveal Marks​","type":1,"pageTitle":"Space Menu","url":"/ki-editor/docs/normal-mode/space-menu#reveal-marks","content":" Reveal Mark offers a modern alternative to traditional window splitting. Rather than manually managing multiple editor windows, you can mark and instantly view important sections simultaneously. You can think of it as automated window splitting.  Loading...  ","version":"Next","tagName":"h3"},{"title":"Misc​","type":1,"pageTitle":"Space Menu","url":"/ki-editor/docs/normal-mode/space-menu#misc","content":" Label\tMeaningPipe\tPipe current selection(s) to a shell command, replace the current selection(s) with the STDOUT. TS Node Sexp\tShow the Tree-sitter node S-expression of the current selection.    Footnotes​ See more at Git hunk ↩ ↩2 This is very useful when you want to get the modified/added files commited into the current branch that you are working on. ↩ ","version":"Next","tagName":"h2"},{"title":"Intro","type":0,"sectionRef":"#","url":"/ki-editor/docs/sub-modes/","content":"Intro There are 3 submodes in Ki: Swap (r)Multi-cursor (t)Extend (f)","keywords":"","version":"Next"},{"title":"Multi-cursor mode","type":0,"sectionRef":"#","url":"/ki-editor/docs/sub-modes/multi-cursor-mode","content":"","keywords":"","version":"Next"},{"title":"Intro​","type":1,"pageTitle":"Multi-cursor mode","url":"/ki-editor/docs/sub-modes/multi-cursor-mode#intro","content":" Multi-cursor mode works through two main mechanisms: Movement and Selection Mode.  Unlike other editors where there are specific keybindings for adding cursors in specific ways, Ki gives you the freedom to add cursors by either:  Using Movement commands to place additional cursorsChanging the Selection Mode to split existing selections into multiple cursors  This flexibility allows you to:  Add a cursor to the next wordAdd cursors until the last lineAdd a cursor to the previous diagnosticAdd a cursor to an oddly specific placeAdd cursors to all lines within current selection(s)  These are just examples - the true power of multi-cursor mode comes from combining Movement and Selection Mode in creative ways. Unleash your imagination!  ","version":"Next","tagName":"h2"},{"title":"1. Movements​","type":1,"pageTitle":"Multi-cursor mode","url":"/ki-editor/docs/sub-modes/multi-cursor-mode#1-movements","content":" In the Multi-cursor mode, every core movement means:  Add a cursor with &lt;movement&gt;  Loading...  ","version":"Next","tagName":"h2"},{"title":"2. Selection Mode Changes​","type":1,"pageTitle":"Multi-cursor mode","url":"/ki-editor/docs/sub-modes/multi-cursor-mode#2-selection-mode-changes","content":" In the Multi-cursor mode, changing the selection mode means:  Split each selection by the new selection mode  Loading...  ","version":"Next","tagName":"h2"},{"title":"3. Other multicursor actions​","type":1,"pageTitle":"Multi-cursor mode","url":"/ki-editor/docs/sub-modes/multi-cursor-mode#3-other-multicursor-actions","content":" Keymap:  Loading...  ","version":"Next","tagName":"h2"},{"title":"A. Keep Match/Remove Match​","type":1,"pageTitle":"Multi-cursor mode","url":"/ki-editor/docs/sub-modes/multi-cursor-mode#a-keep-matchremove-match","content":" Keep/Remove selections matching search.  This is only useful when there's more than 1 selection/cursor, and you want to remove some selections.  Loading...  ","version":"Next","tagName":"h3"},{"title":"B. Curs All​","type":1,"pageTitle":"Multi-cursor mode","url":"/ki-editor/docs/sub-modes/multi-cursor-mode#b-curs-all","content":" Add cursor to all matching selections.  Loading...  ","version":"Next","tagName":"h3"},{"title":"C. Keep Prime Curs​","type":1,"pageTitle":"Multi-cursor mode","url":"/ki-editor/docs/sub-modes/multi-cursor-mode#c-keep-prime-curs","content":" Keep primary cursor only.  Loading...  ","version":"Next","tagName":"h3"},{"title":"D. Delete Curs ←/Delete Curs →​","type":1,"pageTitle":"Multi-cursor mode","url":"/ki-editor/docs/sub-modes/multi-cursor-mode#d-delete-curs-delete-curs-","content":" Delete primary cursor backward/forward.  Loading... ","version":"Next","tagName":"h3"},{"title":"Swap mode","type":0,"sectionRef":"#","url":"/ki-editor/docs/sub-modes/swap-mode","content":"","keywords":"","version":"Next"},{"title":"Examples​","type":1,"pageTitle":"Swap mode","url":"/ki-editor/docs/sub-modes/swap-mode#examples","content":" Loading... ","version":"Next","tagName":"h2"},{"title":"Extend Mode","type":0,"sectionRef":"#","url":"/ki-editor/docs/sub-modes/extend-mode","content":"","keywords":"","version":"Next"},{"title":"Intro​","type":1,"pageTitle":"Extend Mode","url":"/ki-editor/docs/sub-modes/extend-mode#intro","content":" This mode can be entered by pressing f (Qwerty), it is a short-lived mode where the next keypress leads to one of the following:  Surround-related actionsExtending selection  ","version":"Next","tagName":"h2"},{"title":"Surround-related actions​","type":1,"pageTitle":"Extend Mode","url":"/ki-editor/docs/sub-modes/extend-mode#surround-related-actions","content":" ","version":"Next","tagName":"h2"},{"title":"Keymap​","type":1,"pageTitle":"Extend Mode","url":"/ki-editor/docs/sub-modes/extend-mode#keymap","content":" Loading...  This is a group of actions that is related to &quot;surround&quot; or &quot;enclosures&quot;.  Label\tActionAround\tSelect around &lt;x&gt; Inside\tSelect inside &lt;x&gt; Delete Surround\tDelete surrounding &lt;x&gt; Change Surround\tChange surrounding &lt;x&gt; to &lt;y&gt; Surround\tSurround current selection with &lt;x&gt; Select All\tSelect the from first until the last selection of the current selection mode (use with Line to select the whole file).  &lt;x&gt; or &lt;y&gt; can be one of the following:  () Parenthesis{} Curly Brace[] Square Bracket&lt;&gt; Angular Bracket' Single Quote&quot; Double Quote` Backtick&lt;&gt;&lt;/&gt; XML Tag  Loading...  ","version":"Next","tagName":"h3"},{"title":"Extending selection​","type":1,"pageTitle":"Extend Mode","url":"/ki-editor/docs/sub-modes/extend-mode#extending-selection","content":" This is used for extending the current selection.  For example, selecting multiple words or multiple lines.  It behaves more or less the same as click-and-drag in the textbox or text area of common GUI applications, but imagine being able to tune both ends, unlike using a mouse where an incorrect selection means you have to start over again.  When selection extension is enabled:  Each selection is composed of two ranges (originally one range).There's only one moveable range at a time.Every character between the two ranges, including the two ranges, is selectedSelection-wise actions work on the extended rangePress ESC to disable selection extension  Loading... ","version":"Next","tagName":"h2"},{"title":"Themes","type":0,"sectionRef":"#","url":"/ki-editor/docs/themes","content":"","keywords":"","version":"Next"},{"title":"Syntax highlighting​","type":1,"pageTitle":"Themes","url":"/ki-editor/docs/themes#syntax-highlighting","content":" Syntax highlighting is powered by Tree-sitter, and for that to work it needs:  Tree-sitter grammar (for generating the parser)Highlight queries (for determining code sections to highlight)  Tree-sitter grammars is not usually the problem, because there are many open-source tree-sitter grammars out there.  However, the highlight queries are the problem, the grammar author usually provides only barebone highlight queries for their language, and the maintenance of highlight queries is delegated to editor-specific community.  I think this is a tragedy because these highlight queries should not be editor-specific, why should every editor maintain their highlight queries? These wheels should not be reinvented over and over.  Currently, the largest of such communities are Neovim and Helix.  To avoid further fragmentation, Ki currently downloads highlight queries from nvim-treesitter2, until there's a standardized editor-agnostic highlight queries repository.    Footnotes​ See more at Zed default themes ↩ Why not from Helix? Because Helix precedence ordering is not compatible with the tree-sitter-highlight library yet. ↩ ","version":"Next","tagName":"h2"},{"title":"Universal Keybindings","type":0,"sectionRef":"#","url":"/ki-editor/docs/universal-keybindings","content":"","keywords":"","version":"Next"},{"title":"Intro​","type":1,"pageTitle":"Universal Keybindings","url":"/ki-editor/docs/universal-keybindings#intro","content":" The keybindings presented here work in any Modes.  ","version":"Next","tagName":"h2"},{"title":"Keymap​","type":1,"pageTitle":"Universal Keybindings","url":"/ki-editor/docs/universal-keybindings#keymap","content":" Loading...  ","version":"Next","tagName":"h2"},{"title":"⇋ Align​","type":1,"pageTitle":"Universal Keybindings","url":"/ki-editor/docs/universal-keybindings#-align","content":" Switch view alignment.  There are 3 kinds of view alignments (in order):  TopCenterBottom  Executing this action continuously cycles through the list above in order, starting from Top.  ","version":"Next","tagName":"h3"},{"title":"⇋ Window​","type":1,"pageTitle":"Universal Keybindings","url":"/ki-editor/docs/universal-keybindings#-window","content":" Cycle window.  This cycles the cursor to the next window on the screen.  This is useful when you want to scroll the content of another window or copy the content out of another window.  Examples of such windows are:  Hover InfoCompletion Info  ","version":"Next","tagName":"h3"},{"title":"Close​","type":1,"pageTitle":"Universal Keybindings","url":"/ki-editor/docs/universal-keybindings#close","content":" Close current window  Note: when the current window is closed, all of its children will be unmounted (removed) from the screen as well.  ","version":"Next","tagName":"h3"},{"title":"Paste →​","type":1,"pageTitle":"Universal Keybindings","url":"/ki-editor/docs/universal-keybindings#paste-","content":" Although there's already a Paste action in Normal mode, alt+v is more efficient sometimes than hopping between Insert mode and Normal mode for minuscule changes.  For example, assuming the clipboard contains hello, and you wanted the result to be &lt;div&gt;hello&lt;/div&gt;, and the current mode is Insert mode:  Mode\tKeys sequence\tKeypress countInsert\t&lt; d i v &gt; alt+v &lt; / d i v &gt;\t12 Normal\t&lt; d i v &gt; esc p a &lt; / d i v &gt;\t14  ","version":"Next","tagName":"h3"},{"title":"Config​","type":1,"pageTitle":"Universal Keybindings","url":"/ki-editor/docs/universal-keybindings#config","content":" Open the search config. ","version":"Next","tagName":"h3"},{"title":"Tutorial","type":0,"sectionRef":"#","url":"/ki-editor/docs/tutorial","content":"Tutorial Loading...","keywords":"","version":"Next"},{"title":"Primary","type":0,"sectionRef":"#","url":"/ki-editor/docs/normal-mode/selection-modes/primary","content":"","keywords":"","version":"Next"},{"title":"Keymap​","type":1,"pageTitle":"Primary","url":"/ki-editor/docs/normal-mode/selection-modes/primary#keymap","content":" Loading...  ","version":"Next","tagName":"h2"},{"title":"Syntax​","type":1,"pageTitle":"Primary","url":"/ki-editor/docs/normal-mode/selection-modes/primary#syntax","content":" Syntax Node (Coarse).  This selection mode is powered by Tree-sitter.  This is one of my favourite selection mode, as it enable structural editing.  There are two Syntax Node selection modes:  Coarse: faster movement, lower accuracyFine: higher accuracy, slower movement  Movement\tMeaningLeft/Right\tNext/Previous named sibling node Previous/Next\tNext/Previous sibling node, including anonymous ones Up\tParent node Down\tFirst named child Current\tSelect the largest node Jump\tJump to largest node  ","version":"Next","tagName":"h2"},{"title":"Largest Node​","type":1,"pageTitle":"Primary","url":"/ki-editor/docs/normal-mode/selection-modes/primary#largest-node","content":" Using the following Javascript expression as example:  fox.bar();   There are several syntax nodes that start with f1:  fox (identifier)fox.bar (member expression)fox.bar() (call expression)  Suppose the cursor is below f, pressing s selects fox.bar(), because fox.bar() is the largest node that starts with f.  ","version":"Next","tagName":"h3"},{"title":"Named node​","type":1,"pageTitle":"Primary","url":"/ki-editor/docs/normal-mode/selection-modes/primary#named-node","content":" When creating a Tree sitter grammar file for a language, the author can choose to not give names to a certain kind of nodes.  For example, &quot;,&quot; are usually unnamed ( anonymous) in most language grammars, thus it will be skipped when using the Previous/Next movement in Syntax Node.  See more at https://tree-sitter.github.io/tree-sitter/using-parsers/2-basic-parsing.html#named-vs-anonymous-nodes.  ","version":"Next","tagName":"h3"},{"title":"Examples​","type":1,"pageTitle":"Primary","url":"/ki-editor/docs/normal-mode/selection-modes/primary#examples","content":" Loading...  ","version":"Next","tagName":"h3"},{"title":"Syntax*​","type":1,"pageTitle":"Primary","url":"/ki-editor/docs/normal-mode/selection-modes/primary#syntax-1","content":" Fine Syntax Node.  Movement\tMeaningLeft/Right\tNext/Previous named sibling node Previous/Next\tNext/Previous sibling node, including anonymous ones Up\tParent node Shrink\tFirst child (including anonymous) Current\tSmallest node that matches the current selection Jump\tJump to smallest node  Fine Syntax Node is useful when you start to expand the selection starting from the current smallest node.  Suppose we have the following Javascript expression, and the current selection is hello, and we want to select hello.world().  hello.world().foo().bar().spam().wise();   If we press d, the whole expression will be selected1, and we will need to press k several times to shrink the selection down to hello.world().  However, if we use D instead, the selection will remain as hello, and pressing k multiple times will get us to hello.world().  ","version":"Next","tagName":"h2"},{"title":"Line​","type":1,"pageTitle":"Primary","url":"/ki-editor/docs/normal-mode/selection-modes/primary#line","content":" In this selection mode, the selection is trimmed, which means that the leading and trailing spaces of each line are not selected.  Movement\tMeaningUp/Down\tMove to line above/below First/Last\tMove to the first/last line of the current file Left\tMove to the parent line Previous/Next\tMove to empty lines  Parent lines are highlighted lines that represent the parent nodes of the current selection.  This is useful for example when you are within the body of a function and you want to jump to the function name.  This is also practical in the File Explorer because the file explorer is rendered using YAML, so going to Parent Line means going to the parent folder!  Loading...  ","version":"Next","tagName":"h2"},{"title":"Line*​","type":1,"pageTitle":"Primary","url":"/ki-editor/docs/normal-mode/selection-modes/primary#line-1","content":" Full Line.  Same as Line, however, leading whitespaces are selected, and trailing whitespaces, including newline characters are also selected.  ","version":"Next","tagName":"h2"},{"title":"Token​","type":1,"pageTitle":"Primary","url":"/ki-editor/docs/normal-mode/selection-modes/primary#token","content":" Each unit is a sequence of alphanumeric characters including - and _.  Movement\tMeaningUp/Down/Previous/Next\tMove to all kinds of token, including symbols Left/Right\tMove to non-symbol token only  Suppose the following example:  use crate::{components::editor::OpenFile, char_index::CharIndex};   If the current selection is selecting use, the following table demonstrates how many steps it takes to navigate to OpenFile.  Navigation include/exclude symbols\tSteps\tCountInclude\tcrate : : { components : : editor : : OpenFile\t11 Exclude\tcrate components editor OpenFile\t4  Loading...  ","version":"Next","tagName":"h2"},{"title":"Word​","type":1,"pageTitle":"Primary","url":"/ki-editor/docs/normal-mode/selection-modes/primary#word","content":" This selects word within a word.  For example, myOatPepperBanana consists of 4 short word, namely: my, Oat, Pepper and Banana.  This is useful for renaming identifiers, especially if we only want to change a single word of the name. 1  Movement\tMeaningUp/Down/Previous/Next\tMove to all kinds of word, including symbols Left/Right\tMove to non-symbol word only  Loading...  ","version":"Next","tagName":"h2"},{"title":"Char​","type":1,"pageTitle":"Primary","url":"/ki-editor/docs/normal-mode/selection-modes/primary#char","content":" Character.  In this selection mode, the movements behave like the usual editor, where Left/Right means left/right, and so on.  First/Last means the first/last character of the current word.  Loading...  ","version":"Next","tagName":"h2"},{"title":"Last Search​","type":1,"pageTitle":"Primary","url":"/ki-editor/docs/normal-mode/selection-modes/primary#last-search","content":" Repeats the last search.    Footnotes​ You can try it out at https://astexplorer.net/, using the @typescript-eslint/parser. ↩ ↩2 ↩3 ","version":"Next","tagName":"h2"}],"options":{"id":"default"}}